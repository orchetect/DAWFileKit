//
//  FCPXML Media Multicam.swift
//  DAWFileKit • https://github.com/orchetect/DAWFileKit
//  © 2022 Steffan Andrews • Licensed under MIT License
//

#if os(macOS) // XMLNode only works on macOS

import Foundation
import TimecodeKit
import OTCore

extension FinalCutPro.FCPXML.Media.Multicam {
    /// A container of story elements organized sequentially in time.
    /// Similar to a `sequence`.
    public struct Angle: FCPXMLElement {
        public let element: XMLElement
        
        public let elementType: FinalCutPro.FCPXML.ElementType = .mcAngle
        
        public static let supportedElementTypes: Set<FinalCutPro.FCPXML.ElementType> = [.mcAngle]
        
        public init() {
            element = XMLElement(name: elementType.rawValue)
        }
        
        public init?(element: XMLElement) {
            self.element = element
            guard _isElementTypeSupported(element: element) else { return nil }
        }
    }
}

// MARK: - Parameterized init

extension FinalCutPro.FCPXML.Media.Multicam.Angle {
    public init(
        name: String? = nil,
        angleID: String
    ) {
        self.init()
        
        self.name = name
        self.angleID = angleID
    }
}

// MARK: - Structure

extension FinalCutPro.FCPXML.Media.Multicam.Angle {
    public enum Attributes: String {
        // Element-specific Attributes
        /// Angle name.
        case name
        
        /// Specifies the angle identifier.
        /// This is not the angle name, but a unique ID string randomly generated by FCP.
        case angleID
    }
    
    // contains clips
    // contains transitions
}

// MARK: - Attributes

extension FinalCutPro.FCPXML.Media.Multicam.Angle {
    /// Angle name.
    public var name: String? {
        get { element.fcpName }
        nonmutating set { element.fcpName = newValue }
    }
    
    /// Angle ID. (Required)
    public var angleID: String {
        get { element.stringValue(forAttributeNamed: Attributes.angleID.rawValue) ?? "" }
        nonmutating set { element.addAttribute(withName: Attributes.angleID.rawValue, value: newValue) }
    }
}

// MARK: - Children

extension FinalCutPro.FCPXML.Media.Multicam.Angle {
    /// Get or set story elements contained within the angle.
    public var contents: LazyCompactMapSequence<[XMLNode], XMLElement> {
        get { element.childElements }
        nonmutating set {
            element.removeAllChildren()
            element.addChildren(newValue)
        }
    }
}

// MARK: - Meta Conformances

extension FinalCutPro.FCPXML.Media.Multicam.Angle: FCPXMLElementMetaTimeline { 
    public func asAnyTimeline() -> FinalCutPro.FCPXML.AnyTimeline { .mcAngle(self) }
}

// MARK: - Typing

// Angle
extension XMLElement {
    /// FCPXML: Returns the element wrapped in an ``FinalCutPro/FCPXML/Media/Multicam/Angle`` model object.
    /// Call this on a `mc-angle` element only.
    public var fcpAsMCAngle: FinalCutPro.FCPXML.Media.Multicam.Angle? {
        .init(element: self)
    }
}

#endif
