//
//  FCPXML MulticamSource.swift
//  DAWFileKit • https://github.com/orchetect/DAWFileKit
//  © 2022 Steffan Andrews • Licensed under MIT License
//

#if os(macOS) // XMLNode only works on macOS

import Foundation
import OTCore

extension FinalCutPro.FCPXML {
    /// Multicam source used in a `mc-clip`.
    /// A single source may be used for both video and audio, or separate sources may be used for each.
    public struct MulticamSource: FCPXMLElement {
        public let element: XMLElement
        
        public let elementType: ElementType = .mcSource
        
        public static let supportedElementTypes: Set<ElementType> = [.mcSource]
        
        public init() {
            element = XMLElement(name: elementType.rawValue)
        }
        
        public init?(element: XMLElement) {
            self.element = element
            guard _isElementTypeSupported(element: element) else { return nil }
        }
    }
}

// MARK: - Parameterized init

extension FinalCutPro.FCPXML.MulticamSource {
    public init(
        angleID: String? = nil,
        sourceEnable: SourceEnable = .all
    ) {
        self.init()
        
        self.angleID = angleID
        self.sourceEnable = sourceEnable
    }
}

// MARK: - Structure

extension FinalCutPro.FCPXML.MulticamSource {
    public enum Attributes: String {
        /// Specifies the angle identifier.
        /// This is not the angle name, but a unique ID string randomly generated by FCP.
        case angleID
        
        /// Indicates which source to use, if any, from the angle.
        ///
        /// When a `mc-clip` has the same angle selected for both video and audio, a single
        /// `mc-source` child element is used with a `srcEnable` attribute value of `all`.
        ///
        /// When a `mc-clip` has different angles selected for video and audio, then two
        /// `mc-source` child elements are used where one will have a `srcEnable` attribute value of
        /// `video` and the other `audio`.
        case srcEnable
    }
    
    // can contain DTD %intrinsic-params-video
    // can contain DTD %video_filter_item
}

// MARK: - Attributes

extension FinalCutPro.FCPXML.MulticamSource {
    /// Specifies the angle identifier.
    /// This is not the angle name, but a unique ID string randomly generated by FCP.
    public var angleID: String? {
        get { element.fcpAngleID }
        nonmutating set { element.fcpAngleID = newValue }
    }
    
    /// Indicates which source to use, if any, from the angle. (Default: `.all`)
    ///
    /// When a `mc-clip` has the same angle selected for both video and audio, a single
    /// `mc-source` child element is used with a `srcEnable` attribute value of `all`.
    ///
    /// When a `mc-clip` has different angles selected for video and audio, then two
    /// `mc-source` child elements are used where one will have a `srcEnable` attribute value of
    /// `video` and the other `audio`.
    public var sourceEnable: SourceEnable {
        get { element.fcpMulticamSourceSourceEnable }
        nonmutating set { element.fcpMulticamSourceSourceEnable = newValue }
    }
}

extension FinalCutPro.FCPXML.MulticamSource: FCPXMLElementAudioRoleSourceChildren { }

// MARK: - Children

extension XMLElement { // MCClip
    /// FCPXML: Returns child `mc-source` elements.
    /// Use on `multicam` elements.
    public var fcpMulticamSources: LazyFCPXMLChildrenSequence<FinalCutPro.FCPXML.MulticamSource> {
        get { children(whereFCPElement: .mcSource) }
        set { _updateChildElements(ofType: .mcSource, with: newValue) }
    }
}

// MARK: - Attribute Types

extension FinalCutPro.FCPXML.MulticamSource {
    /// Multicam angle source enable value.
    ///
    /// When a `mc-clip` has the same angle selected for both video and audio, a single
    /// `mc-source` child element is used with a `srcEnable` attribute value of `all`.
    ///
    /// When a `mc-clip` has different angles selected for video and audio, then two
    /// `mc-source` child elements are used where one will have a `srcEnable` attribute value of
    /// `video` and the other `audio`.
    public enum SourceEnable: String, Equatable, Hashable, CaseIterable {
        /// Audio and Video.
        case all
        
        /// Audio source.
        case audio
        
        /// Video source.
        case video
        
        /// No sources.
        case none
    }
}

// Multicam Source
extension XMLElement {
    /// FCPXML: Returns value for attribute `angleID`.
    /// Call on a `mc-angle` or `mc-source` element.
    public var fcpAngleID: String? {
        get { stringValue(forAttributeNamed: "angleID") }
        set { addAttribute(withName: "angleID", value: newValue) }
    }
    
    /// FCPXML: Returns value for attribute `srcEnable`. (Default: `.all`)
    /// Call on a `mc-source` element only.
    public var fcpMulticamSourceSourceEnable: FinalCutPro.FCPXML.MulticamSource.SourceEnable {
        get {
            let defaultValue: FinalCutPro.FCPXML.MulticamSource.SourceEnable = .all
            
            guard let value = stringValue(forAttributeNamed: "srcEnable")
            else { return defaultValue }
            
            return FinalCutPro.FCPXML.MulticamSource.SourceEnable(rawValue: value) ?? defaultValue
        }
        set {
            addAttribute(withName: "srcEnable", value: newValue.rawValue)
        }
    }
}

// MARK: - Sequence Methods

// [Multicam Source]
extension Sequence where Element == XMLElement {
    /// FCPXML: Returns the corresponding angle IDs for the given multicam source(s).
    /// Call on a `mc-source` element.
    public func fcpAudioVideoAngleIDs() -> (audioID: String?, videoID: String?) {
        var audioAngleID: String?
        var videoAngleID: String?
        
        for element in self {
            let sourceEnable = element.fcpMulticamSourceSourceEnable
            switch sourceEnable {
            case .all:
                audioAngleID = element.fcpAngleID
                videoAngleID = element.fcpAngleID
            case .audio:
                audioAngleID = element.fcpAngleID
            case .video:
                videoAngleID = element.fcpAngleID
            case .none:
                break
            }
        }
        
        return (audioID: audioAngleID, videoID: videoAngleID)
    }
}

// MARK: - Typing

// Multicam Source
extension XMLElement {
    /// FCPXML: Returns the element wrapped in a ``FinalCutPro/FCPXML/MulticamSource`` model object.
    /// Call this on a `mc-source` element only.
    public var fcpAsMulticamSource: FinalCutPro.FCPXML.MulticamSource? {
        .init(element: self)
    }
}

#endif
